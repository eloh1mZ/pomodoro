{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte/store/index.mjs","../../src/store/keyboard.js","../../src/store/notificator.js","../../src/store/index.js","../../src/store/timer.js","../../src/store/stats.js","../../src/utils.js","../../src/components/working-circle.svelte","../../src/components/break-circle.svelte","../../src/components/pomodoro.svelte","../../src/components/pause.svelte","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.44.0' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","export let Keyboard = {\r\n\topts: {},\r\n\r\n\tinit(handlers={}) {\r\n\t\taddEventListener(\"keyup\", e => {\r\n\t\t\tif (this.opts && this.opts.debug)\r\n\t\t\t\tconsole.log(e.code)\r\n\r\n\t\t\thandlers[e.code] && handlers[e.code]()\r\n\t\t})\r\n\t}\r\n}","const types = {\r\n\tworkend: {\r\n\t\ttitle: \"Отдыхать\"\r\n\t},\r\n\tend: {\r\n\t\ttitle: \"Помидор закончился\"\r\n\t},\r\n\tstart: {\r\n\t\ttitle: \"Проверка\"\r\n\t}\r\n}\r\n\r\nexport let Notificator = {\r\n\topts: {},\r\n\t_notify(type) {\r\n\t\tconst notification = types[type]\r\n\t\tif (!notification)\r\n\t\t\treturn\r\n\t\tconst title = notification.title\r\n\t\tconst opts = notification.opts || {}\r\n\r\n\t\tif (this.opts.debug)\r\n\t\t\tconsole.log(title, opts)\r\n\t\telse\r\n\t\t\tnew Notification(title, opts)\r\n\t},\r\n\r\n\t_requestPermission(type) {\r\n\t\tNotification.requestPermission(permission => {\r\n\t\t\tif (!Notification.permission)\r\n\t\t\t\tNotification.permission = permission\r\n\r\n\t\t\tif (permission === \"granted\")\r\n\t\t\t\tthis._notify(type)\r\n\t\t})\r\n\t},\r\n\r\n\tinit() {\r\n\t\tif (Notification.permission === \"granted\")\r\n\t\t\treturn\r\n\r\n\t\tNotification.requestPermission(permission => {\r\n\t\t\tif (!Notification.permission)\r\n\t\t\t\tNotification.permission = permission\r\n\t\t})\r\n\t},\r\n\r\n\tnotify(type) {\r\n\t\tif ('Notification' in window) {\r\n\t\t\tif (Notification.permission === 'granted')\r\n\t\t\t\tthis._notify(type)\r\n\t\t\telse\r\n\t\t\t\tthis._requestPermission(type)\r\n\t\t}\r\n\t}\r\n}","import { Timer } from \"./timer\"\r\nimport { Stats } from \"./stats\"\r\nimport { Keyboard } from \"./keyboard\"\r\nimport { Notificator } from \"./notificator\"\r\n\r\nexport let timer = new Timer()\r\nexport let stats = new Stats(0)\r\n\r\n// Notificator.opts = {debug: true}\r\n\r\nconst workingTimer = [\r\n\t30 * 60 * 1000, {\r\n\t\tisWorking: 5 / 6,\r\n\t\ttype: \"working\"\r\n\t}\r\n]\r\n\r\nconst breakTimer = [\r\n\t15 * 60 * 1000, {\r\n\t\tisWorking: 0,\r\n\t\ttype: \"break\"\r\n\t}\r\n]\r\n\r\nif (\"serviceWorker\" in navigator) {\r\n\tnavigator.serviceWorker.register(\"./sw.js\").catch(e => console.log(e))\r\n}\r\n\r\nNotificator.init()\r\n\r\ntimer.init(...workingTimer)\r\n\r\ntimer.onworkend = event => {\r\n\tNotificator.notify(event.type)\r\n}\r\nconst cycleLength = 5\r\ntimer.onend = event => {\r\n\tlet complited = ++stats.value % cycleLength\r\n\tif (complited == cycleLength - 1)\r\n\t\ttimer.init(...breakTimer).start()\r\n\telse\r\n\t\ttimer.init(...workingTimer)\r\n\r\n\tNotificator.notify(event.type)\r\n}\r\n\r\nKeyboard.init({\r\n\tSpace: () => timer.change()\r\n})","import { writable } from \"svelte/store\"\r\n\r\nexport class Timer {\r\n\r\n\t/**\r\n\t *\r\n\t * @param {number} timeInMs\r\n\t * @param {{debug: boolean}} opts\r\n\t */\r\n\tconstructor() {\r\n\t\tthis._store = writable({\r\n\t\t\tisPaused: null,\r\n\t\t\tvalue: null,\r\n\t\t\tleftTime: null,\r\n\t\t\ttype: null\r\n\t\t})\r\n\r\n\t\tthis.subscribe = this._store.subscribe\r\n\t\tthis.update = this._store.update\r\n\t\tthis.set = this._store.set\r\n\r\n\t\tthis._eventListeners = {}\r\n\t}\r\n\r\n\tinit(timeInMs, opts={}) {\r\n\t\tthis.opts = opts\r\n\t\tthis._time = timeInMs\r\n\r\n\t\tthis.update(store => {\r\n\t\t\tstore.isPaused = false\r\n\t\t\tstore.time = this._time\r\n\t\t\tstore.isWorkingCondition = opts.isWorking\r\n\t\t\tstore.type = opts.type\r\n\t\t\treturn store\r\n\t\t})\r\n\r\n\t\tif (this.isStarted && !this.isPaused)\r\n\t\t\tthis._startInterval()\r\n\r\n\t\treturn this\r\n\t}\r\n\r\n\tonstart(){}\r\n\tonend(){}\r\n\tonpause(){}\r\n\tonunpause(){}\r\n\tonworkstart(){}\r\n\tonworkend(){}\r\n\r\n\r\n\t/**\r\n\t * @param {string} type\r\n\t * @param {function} listener - callback-function on event dispached\r\n\t * @return listener\r\n\t */\r\n\taddEventListener(type, listener) {\r\n\t\tif (!this._eventListeners[type])\r\n\t\t\tthis._eventListeners[type] = []\r\n\r\n\t\tthis._eventListeners[type].push(listener)\r\n\t\treturn listener\r\n\t}\r\n\r\n\t_dispatchEvent(type) {\r\n\t\tif (this.opts.debug)\r\n\t\t\tconsole.log(\"event \" + type)\r\n\r\n\t\tconst event = {\r\n\t\t\ttype, target: this\r\n\t\t}\r\n\r\n\t\tthis._eventListeners[type] && this._eventListeners[type].forEach(listener => listener(event))\r\n\t\tif (this[\"on\"+type])\r\n\t\t\tthis[\"on\"+type](event)\r\n\t}\r\n\r\n\r\n\tset isStarted(value) {localStorage.setItem(\"isStarted\", JSON.stringify(value))}\r\n\tget isStarted() {return JSON.parse(localStorage.getItem(\"isStarted\"))}\r\n\r\n\tset isPaused(value) {\r\n\t\tlocalStorage.setItem(\"isPaused\", JSON.stringify(value))\r\n\t\tthis.update(store => {\r\n\t\t\tstore.isPaused = value\r\n\t\t\treturn store\r\n\t\t})\r\n\t}\r\n\tget isPaused() {return JSON.parse(localStorage.getItem(\"isPaused\"))}\r\n\r\n\tset startTime(value) {localStorage.setItem(\"startTime\", JSON.stringify(value))}\r\n\tget startTime() {return JSON.parse(localStorage.getItem(\"startTime\"))}\r\n\r\n\tset endTime(value) {localStorage.setItem(\"endTime\", JSON.stringify(value))}\r\n\tget endTime() {return JSON.parse(localStorage.getItem(\"endTime\"))}\r\n\r\n\tset pausedTime(value) {localStorage.setItem(\"pausedTime\", JSON.stringify(value))}\r\n\tget pausedTime() {return JSON.parse(localStorage.getItem(\"pausedTime\"))}\r\n\r\n\tset value(value) {\r\n\r\n\t\tthis.update(store => {\r\n\t\t\tstore.value = value\r\n\t\t\tstore.leftTime = this._time * (1 - value)\r\n\t\t\treturn store\r\n\t\t})\r\n\t}\r\n\tget value() {\r\n\t\tconst time = this.isPaused ? this.pausedTime : Date.now()\r\n\t\tconst value = (time - this.startTime) / (this.endTime - this.startTime)\r\n\r\n\t\tif (value >= 1) {\r\n\t\t\tthis.value = 1\r\n\t\t\tthis.end()\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tthis.value = value\r\n\t\treturn value\r\n\t}\r\n\r\n\t_frame() {\r\n\t\tconst value = this.value\r\n\t\tif (value < 1)\r\n\t\t\tthis._interval = requestAnimationFrame(this._frame.bind(this))\r\n\t}\r\n\r\n\t_stopInterval() {\r\n\t\tcancelAnimationFrame(this._interval)\r\n\t}\r\n\t_startInterval() {\r\n\t\tthis._frame()\r\n\t}\r\n\r\n\tstart() {\r\n\t\tthis.isStarted = true\r\n\r\n\t\tthis.startTime = Date.now()\r\n\t\tthis.endTime = this.startTime + this._time\r\n\t\tthis.value = 0\r\n\r\n\t\tthis._startInterval()\r\n\t\tthis._dispatchEvent(\"start\")\r\n\t\treturn this\r\n\t}\r\n\r\n\tend() {\r\n\t\tthis.value = 1\r\n\t\tthis.isStarted = false\r\n\t\tthis._stopInterval()\r\n\t\tthis._dispatchEvent(\"end\")\r\n\t\treturn this\r\n\t}\r\n\r\n\tpause() {\r\n\t\tthis.isPaused = true\r\n\t\tthis.pausedTime = Date.now()\r\n\t\tthis._stopInterval()\r\n\t\tthis._dispatchEvent(\"pause\")\r\n\t\treturn this\r\n\t}\r\n\r\n\tunpause() {\r\n\t\tthis.isPaused = false\r\n\t\tthis.startTime = this.startTime + Date.now() - this.pausedTime\r\n\t\tthis.endTime = this.endTime + Date.now() - this.pausedTime\r\n\t\tthis.pausedTime = 0\r\n\t\tthis._startInterval()\r\n\t\tthis._dispatchEvent(\"unpause\")\r\n\t\treturn this\r\n\t}\r\n\r\n\t// TODO\r\n\t// Придумать нормальное название функции\r\n\tchange() {\r\n\t\tif (this.isPaused)\r\n\t\t\tthis.unpause()\r\n\t\telse if (this.isStarted) {\r\n\t\t\tif (this.isWorking)\r\n\t\t\t\tthis.pause()\r\n\t\t}\r\n\t\telse\r\n\t\t\tthis.start()\r\n\r\n\t\treturn this\r\n\t}\r\n}","import { writable } from \"svelte/store\"\r\n\r\nexport class Stats {\r\n\r\n\t/**\r\n\t *\r\n\t * @param {number} timeInMs\r\n\t * @param {{debug: boolean}} opts\r\n\t */\r\n\tconstructor() {\r\n\t\tthis._store = writable(this.value)\r\n\t\tthis.subscribe = this._store.subscribe\r\n\t\tthis.update = this._store.update\r\n\t}\r\n\tget _id() {\r\n\t\tlet date = new Date()\r\n\t\treturn [\r\n\t\t\tdate.getFullYear(),\r\n\t\t\tdate.getMonth(),\r\n\t\t\tdate.getDate()\r\n\t\t].join(\"-\")\r\n\t}\r\n\tget stats() {\r\n\t\treturn JSON.parse(localStorage.getItem(\"stats\") || \"{}\")\r\n\t}\r\n\tset stats(value) {\r\n\t\tlocalStorage.setItem(\"stats\", JSON.stringify(value))\r\n\t}\r\n\tset value(_value) {\r\n\t\tconst stats = this.stats\r\n\t\tthis.update(() => _value)\r\n\t\tstats[this._id] = _value\r\n\t\tthis.stats = stats\r\n\t}\r\n\tget value() {\r\n\t\treturn this.stats[this._id] || 0\r\n\t}\r\n}","export function polarToCartesian (centerX, centerY, radius, angleInDegrees) {\r\n\tconst angleInRadians = (angleInDegrees-90) * Math.PI / 180\r\n\r\n\treturn {\r\n\t\tx: centerX + (radius * Math.cos(angleInRadians)),\r\n\t\ty: centerY + (radius * Math.sin(angleInRadians))\r\n\t}\r\n}\r\n\r\nexport function describeArc(x, y, radius, startAngle, endAngle){\r\n\tlet start = polarToCartesian(x, y, radius, endAngle),\r\n\t\tend = polarToCartesian(x, y, radius, startAngle)\r\n\r\n\tlet largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\"\r\n\r\n\tlet d = [\r\n\t\tstart.x, start.y,\r\n\t\t\"A\", radius, radius, 0, largeArcFlag, 0, end.x, end.y\r\n\t]\r\n\r\n\treturn d.join(\" \")\r\n}\r\n\r\nexport function map(value, srcMin, srcMax, dstMin, dstMax) {\r\n\treturn (value - srcMin) / (srcMax - srcMin) * (dstMax - dstMin) + dstMin\r\n}\r\n\r\nexport function msToTime(duration, zero=false) {\r\n\tlet\tseconds = ((duration % 60000) / 1000).toFixed(0),\r\n\t\tminutes = Math.floor(duration / 60000)\r\n\r\n\tif (seconds >= 60) {\r\n\t\tseconds -= 60\r\n\t\tminutes++\r\n\t}\r\n\r\n\tif (zero) {\r\n\t\tminutes = (minutes < 10) ? \"0\" + minutes : minutes\r\n\t\tseconds = (seconds < 10) ? \"0\" + seconds : seconds\r\n\t}\r\n\r\n\treturn {minutes, seconds}\r\n}","<script>\r\nimport { createEventDispatcher } from 'svelte';\r\nimport { describeArc, map } from \"../utils\";\r\n\r\nconst dispatch = createEventDispatcher()\r\n\r\nlet className\r\nexport { className as class }\r\nexport let progress = 0\r\n\r\nlet pomodoro, petal\r\n$: {\r\n\tlet angle = progress * 360\r\n\tpomodoro = describeArc(100, 106, 95, 0, angle > 300 ? 300 : angle, true)\r\n\r\n\tif (angle >= 300) {\r\n\t\tconst _angle = map(angle, 300, 360, 0, 1)\r\n\t\tpetal = describeArc(\r\n\t\t\t91, 90, 85,\r\n\t\t\t-60,\r\n\t\t\t60 * _angle - 60\r\n\t\t)\r\n\t} else {\r\n\t\tpetal = null\r\n\t}\r\n}\r\n\r\n</script>\r\n<svg viewBox=\"0 0 200 206\" style=\"display: block\" class={className} on:click={() => dispatch(\"click\")}>\r\n\t<path\r\n\t\td=\"M 15.4 62.9 A 95 95 0 1 0 105 11.1\"\r\n\t\tfill=\"none\"\r\n\t\tstroke-width=\"10\"\r\n\t\tstroke=\"var(--working-color)\"\r\n\t\tstroke-linecap=\"round\"\r\n\t/>\r\n\r\n\t<path\r\n\t\td=\"M 86 5.15 A 85 85 0 0 0 20 43.2\"\r\n\t\tfill=\"none\"\r\n\t\tstroke-width=\"10\"\r\n\t\tstroke=\"var(--break-color)\"\r\n\t\tstroke-linecap=\"round\"\r\n\t/>\r\n\r\n\t<path\r\n\t\td=\"M {pomodoro || '0 0'} L 100 106\"\r\n\t\tfill=\"var(--working-color)\"\r\n\t/>\r\n\r\n\t<path\r\n\t\td=\"M {petal || '0 0'} L 91 90\"\r\n\t\tfill=\"var(--break-color)\"\r\n\t/>\r\n</svg>","<script>\r\nimport { describeArc } from \"../utils\";\r\n\r\nlet className\r\nexport { className as class }\r\nexport let progress = 0\r\n\r\n$: petal = describeArc(100, 100, 90, 0, 359.9 * progress)\r\n</script>\r\n<svg viewBox=\"0 0 200 200\" style=\"display: block\" class={className}>\r\n\t<path\r\n\t\td=\"M 99.8 10 A 90 90 0 1 0 100 10\"\r\n\t\tstroke=\"var(--break-color)\"\r\n\t\tfill=\"none\"\r\n\t\tstroke-width=\"10\"\r\n\t\tstroke-linecap=\"round\"\r\n\t/>\r\n\t<path\r\n\t\td=\"M {petal || '0 0'} L 100 100\"\r\n\t\tfill=\"var(--break-color)\"\r\n\t/>\r\n</svg>","<script>\r\nimport WorkingCircle from \"./working-circle.svelte\"\r\nimport BreakCircle from \"./break-circle.svelte\"\r\nimport { msToTime } from \"../utils\"\r\n\r\nexport let timer\r\nlet working, break_, isWorking\r\n$: {\r\n\tlet breakTimeMax = $timer.time * (1 - $timer.isWorkingCondition)\r\n\tlet workingTime = Math.max($timer.leftTime - breakTimeMax, 0)\r\n\tworking = msToTime(workingTime, true)\r\n\r\n\tlet breakTime = Math.min($timer.leftTime, breakTimeMax)\r\n\tbreak_ = msToTime(breakTime, true)\r\n\r\n\tisWorking = $timer.isWorking = $timer.leftTime > breakTimeMax\r\n}\r\n\r\n\r\nfunction click() {\r\n\ttimer.change()\r\n}\r\n</script>\r\n\r\n\r\n<div class=\"pomodoro pomodoro--{$timer.type} pomodoro--working-{isWorking}\">\r\n\t<BreakCircle\r\n\t\tprogress={$timer.value}\r\n\t\tclass=\"pomodoro__circle pomodoro__circle--break\"\r\n\t/>\r\n\t<WorkingCircle\r\n\t\tprogress={$timer.value}\r\n\t\tclass=\"pomodoro__circle pomodoro__circle--working\"\r\n\t\ton:click={click}\r\n\t/>\r\n\r\n\r\n\r\n\t<div class=\"left-time__wrapper\">\r\n\t\t<div class=\"left-time\">\r\n\t\t\t<svg viewBox=\"0 0 13 14\" class=\"left-time__marker\" fill=\"currentColor\">\r\n\t\t\t\t<path d=\"M11.792 5.24532C13.179 6.00397 13.179 7.99603 11.792 8.75468L3.70974 13.1754C2.37694 13.9044 .75 12.9398 .75 11.4207L.75 2.57932C.75 1.06017 2.37694 .0956483 3.70974 .824643L11.792 5.24532Z\"/>\r\n\t\t\t</svg>\r\n\t\t\t<p class=\"left-time__value left-time__value--working\">{working.minutes}:{working.seconds}</p>\r\n\t\t\t<p class=\"left-time__value left-time__value--break\">{break_.minutes}:{break_.seconds}</p>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n<style>\r\n.pomodoro {\r\n\twidth: 90%;\r\n\tmax-width: 250px;\r\n\tdisplay: grid;\r\n\tposition: relative;\r\n}\r\n.left-time__wrapper {\r\n\tposition: absolute;\r\n\ttop: 100%;\r\n\twidth: 100%;\r\n\tpadding: .5em;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\tflex-direction: column;\r\n}\r\n.left-time__value {\r\n\tmargin: 0;\r\n\ttransition: 0.5s all;\r\n}\r\n.left-time {\r\n\tposition: relative;\r\n\tdisplay: grid;\r\n\tgrid-gap: .5em;\r\n\tline-height: 1;\r\n\tfont-size: 24px;\r\n\tcolor: rgb(0 0 0 / .5);\r\n}\r\n.left-time__marker {\r\n\tcontent: \">\";\r\n\tposition: absolute;\r\n\tmargin-left: -1em;\r\n\theight: .5em;\r\n\ttop: .25em;\r\n\tleft: 0;\r\n\ttransition: 0.5s all;\r\n}\r\n.pomodoro--working-false .left-time__marker {\r\n\ttransform: translateY(1.5em);\r\n}\r\n.pomodoro--working-true .left-time__value--working {\r\n\tcolor: var(--working-color);\r\n}\r\n.pomodoro--working-false .left-time__value--break {\r\n\tcolor: var(--break-color);\r\n}\r\n\r\n:global(.pomodoro__circle) {\r\n\topacity: 0;\r\n\tgrid-area: 1 / 1 / -1 / -1;\r\n\ttransition: .5s all;\r\n\talign-self: center;\r\n}\r\n:global(.pomodoro__circle--working) {\r\n\tz-index: 1;\r\n}\r\n\r\n.pomodoro--working :global(.pomodoro__circle--working) {\r\n\topacity: 1;\r\n}\r\n.pomodoro--break :global(.pomodoro__circle--break) {\r\n\topacity: 1;\r\n}\r\n\r\n</style>","<script>\r\nexport let isPaused\r\n</script>\r\n\r\n<div class=\"pause {isPaused && 'pause--visible'}\">\r\n\t<div class=\"pause__icon\"></div>\r\n</div>\r\n\r\n<style>\r\n.pause {\r\n\topacity: 0;\r\n\tpointer-events: none;\r\n\tposition: absolute;\r\n\ttop: 0; left: 0;\r\n\tbottom: 0; right: 0;\r\n\tbackground-color: var(--overlay-background-color);\r\n\tcolor: var(--overlay-color);\r\n\tz-index: 1;\r\n\ttransition: all .5s;\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n}\r\n.pause__icon {\r\n\tdisplay: flex;\r\n\tgap: 1em;\r\n}\r\n.pause__icon::before, .pause__icon::after {\r\n\tcontent: \"\";\r\n\twidth: 1em;\r\n\theight: 4em;\r\n\tbackground-color: currentColor;\r\n\tborder-radius: .3em;\r\n}\r\n\r\n.pause--visible {\r\n\topacity: 1;\r\n}\r\n</style>","<script>\r\nimport { timer } from \"./store\"\r\nimport Pomodoro from \"./components/pomodoro.svelte\"\r\nimport Pause from \"./components/pause.svelte\"\r\n</script>\r\n\r\n<div\r\n\tclass=\"\r\n\t\tapp\r\n\t\tapp--{$timer.isWorking ? 'working' : 'break'}\r\n\t\"\r\n>\r\n\t<Pomodoro {timer} />\r\n\t<Pause isPaused={$timer.isPaused} />\r\n</div>\r\n\r\n<style>\r\n.app {\r\n\tposition: relative;\r\n\tpadding-left: 1em;\r\n\tpadding-right: 1em;\r\n\r\n\tgap: 1em;\r\n\r\n\twidth: 100vw;\r\n\theight: 100vh;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\r\n\ttransition: all 0.5s;\r\n}\r\n\r\n.app--working {\r\n\tbackground-color: var(--working-background-color);\r\n}\r\n.app--break {\r\n\tbackground-color: var(--break-background-color);\r\n}\r\n</style>","import App from './App.svelte'\r\n\r\nconst app = new App({\r\n\ttarget: document.body\r\n})\r\n\r\nexport default app"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","subscribe","store","callbacks","unsub","unsubscribe","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","svg_element","createElementNS","text","data","createTextNode","space","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_style","key","important","style","setProperty","current_component","set_current_component","component","createEventDispatcher","Error","get_current_component","type","detail","$$","event","bubbles","e","createEvent","initCustomEvent","custom_event","slice","call","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","flushing","seen_callbacks","Set","flush","i","length","update","pop","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","transition_in","block","local","delete","transition_out","o","outros","c","d","create_component","mount_component","customElement","on_mount","on_destroy","m","new_on_destroy","map","filter","destroy_component","detaching","make_dirty","then","fill","init","options","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","index","indexOf","splice","$set","$$props","obj","$$set","keys","subscriber_queue","writable","start","stop","subscribers","set","new_value","run_queue","subscriber","invalidate","size","Keyboard","opts","handlers","addEventListener","debug","console","log","code","types","workend","title","end","Notificator","_notify","notification","Notification","_requestPermission","requestPermission","permission","notify","window","timer","constructor","_store","isPaused","leftTime","_eventListeners","timeInMs","_time","time","isWorkingCondition","isWorking","isStarted","_startInterval","onstart","onend","onpause","onunpause","onworkstart","onworkend","listener","_dispatchEvent","localStorage","setItem","JSON","stringify","parse","getItem","startTime","endTime","pausedTime","Date","now","_frame","_interval","requestAnimationFrame","bind","_stopInterval","cancelAnimationFrame","pause","unpause","change","stats","_id","date","getFullYear","getMonth","getDate","join","_value","workingTimer","breakTimer","navigator","serviceWorker","register","catch","polarToCartesian","centerX","centerY","radius","angleInDegrees","angleInRadians","Math","PI","x","cos","y","sin","describeArc","startAngle","endAngle","largeArcFlag","msToTime","duration","zero","seconds","toFixed","minutes","floor","handler","removeEventListener","dispatch","pomodoro","petal","className","progress","angle","_angle","srcMin","dstMin","cycleLength","Space","working","break_","breakTimeMax","$timer","workingTime","max","breakTime","min","body"],"mappings":"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"}